/*
 Navicat Premium Data Transfer

 Source Server         : 138
 Source Server Type    : MySQL
 Source Server Version : 50730
 Source Host           : 192.168.100.138:3306
 Source Schema         : mall_nacos

 Target Server Type    : MySQL
 Target Server Version : 50730
 File Encoding         : 65001

 Date: 04/09/2020 16:37:16
*/
use mall_nacos;
SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfo_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 33 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info
-- ----------------------------
INSERT INTO `config_info` VALUES (10, 'mall-coupon.yaml', 'dev', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 03:04:03', '2020-08-10 03:04:03', NULL, '192.168.117.1', '', '40cf1f80-6df8-418b-af00-5b3627b02c6c', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (11, 'datasource.yaml', 'dev', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 03:04:03', '2020-08-10 03:04:03', NULL, '192.168.117.1', '', '40cf1f80-6df8-418b-af00-5b3627b02c6c', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (12, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:04:03', '2020-08-10 03:04:03', NULL, '192.168.117.1', '', '40cf1f80-6df8-418b-af00-5b3627b02c6c', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (13, 'mall-admin.yaml', 'dev', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '480717fcd7dd1cc0c6cb70b21a3e7a9e', '2020-08-10 03:07:33', '2020-08-11 16:47:59', NULL, '192.168.117.1', '', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (14, 'datasource.yaml', 'dev', 'spring:\r\n    datasource:\r\n        type: com.alibaba.druid.pool.DruidDataSource\r\n        druid:\r\n            driver-class-name: com.mysql.cj.jdbc.Driver\r\n            url: jdbc:mysql://192.168.100.138:3306/mall_admin?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\r\n            username: root\r\n            password: root\r\n            initial-size: 10\r\n            max-active: 100\r\n            min-idle: 10\r\n            max-wait: 60000\r\n            pool-prepared-statements: true\r\n            max-pool-prepared-statement-per-connection-size: 20\r\n            time-between-eviction-runs-millis: 60000\r\n            min-evictable-idle-time-millis: 300000\r\n            #Oracle需要打开注释\r\n            #validation-query: SELECT 1 FROM DUAL\r\n            test-while-idle: true\r\n            test-on-borrow: false\r\n            test-on-return: false\r\n            stat-view-servlet:\r\n                enabled: true\r\n                url-pattern: /druid/*\r\n                #login-username: admin\r\n                #login-password: admin\r\n            filter:\r\n                stat:\r\n                    log-slow-sql: true\r\n                    slow-sql-millis: 1000\r\n                    merge-sql: false\r\n                wall:\r\n                    config:\r\n                        multi-statement-allow: true\r\n\r\n\r\n##多数据源的配置\r\n#dynamic:\r\n#  datasource:\r\n#    slave1:\r\n#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\r\n#      url: jdbc:sqlserver://localhost:1433;DatabaseName=renren_security\r\n#      username: sa\r\n#      password: 123456\r\n#    slave2:\r\n#      driver-class-name: org.postgresql.Driver\r\n#      url: jdbc:postgresql://localhost:5432/renren_security\r\n#      username: renren\r\n#      password: 123456', 'dffcc57ff6022f659b3776db374de1a2', '2020-08-10 03:07:33', '2020-08-18 06:43:29', NULL, '0:0:0:0:0:0:0:1', '', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (15, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.100.138:8848', '20db950a8e3ef73dea5591f4d2b7b84a', '2020-08-10 03:07:33', '2020-08-18 06:28:08', NULL, '0:0:0:0:0:0:0:1', '', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (16, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n            # - Path=/api/admin/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '868d5447e0e9fad43b1bd2a335d20dfc', '2020-08-10 03:10:37', '2020-09-01 02:56:02', NULL, '192.168.100.138', '', '0065df7d-ce04-4969-8823-aa48ccbbb29c', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (17, 'mall-gateway.yaml', 'dev', 'server:\r\n  port: 88\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '939a33fc56eb77445f322b8bc42b8dd8', '2020-08-10 03:10:37', '2020-08-10 03:10:37', NULL, '192.168.117.1', '', '0065df7d-ce04-4969-8823-aa48ccbbb29c', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (18, 'datasource.yaml', 'dev', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    # url: jdbc:mysql://192.168.117.129:3316/mall_gateway?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    url: jdbc:mysql://192.168.100.138:3306/mall_gateway?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', '941a65495c5efda9ef526b4fc0c5b34a', '2020-08-10 03:10:37', '2020-08-31 09:13:36', NULL, '192.168.100.138', '', '0065df7d-ce04-4969-8823-aa48ccbbb29c', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (20, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', '', 'bfe18aa3-337b-439e-b02e-1c83914733c2', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (21, 'mall-ware.yaml', 'dev', 'server:\r\n  port: 11000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', 'd934b1697154b541befaf7f9b89e438d', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', '', 'bfe18aa3-337b-439e-b02e-1c83914733c2', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (22, 'datasource.yaml', 'dev', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_ware?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'e556292ca0ae91f44ab692226b102668', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', '', 'bfe18aa3-337b-439e-b02e-1c83914733c2', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (24, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.100.138:8848', '20db950a8e3ef73dea5591f4d2b7b84a', '2020-08-10 03:11:48', '2020-08-31 01:39:51', NULL, '192.168.100.138', '', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (25, 'mall-product.yaml', 'dev', 'server:\r\n  port: 10000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n      # 逻辑已删除值，默认1\r\n      logic-delete-value: 1 \r\n      # 逻辑未删除值，默认0\r\n      logic-not-delete-value: 0\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '39984ebbcfed0d3381a8abe482fb855d', '2020-08-10 03:11:48', '2020-08-13 06:48:52', NULL, '192.168.117.1', '', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (26, 'datasource.yaml', 'dev', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.100.138:3306/mall_product?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', '4e885cfc3ef15116fc983b8abb7b9537', '2020-08-10 03:11:48', '2020-08-31 01:40:14', NULL, '192.168.100.138', '', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (27, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:12:18', '2020-08-10 03:12:18', NULL, '192.168.117.1', '', '72cc4135-6c4e-4549-a91e-137ce538dc32', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (28, 'mall-order.yaml', 'dev', 'server:\r\n  port: 9000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', 'd005fc17b28b2bb98f1faec6991663f6', '2020-08-10 03:12:18', '2020-08-10 03:12:18', NULL, '192.168.117.1', '', '72cc4135-6c4e-4549-a91e-137ce538dc32', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (29, 'datasource.yaml', 'dev', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_order?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'f20a1e09f908b0926d2c65960ab2b1b8', '2020-08-10 03:12:18', '2020-08-10 03:12:18', NULL, '192.168.117.1', '', '72cc4135-6c4e-4549-a91e-137ce538dc32', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (30, 'cloud.yaml', 'dev', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', '', '4d414d18-64f9-4f95-8a36-17c12a1ae756', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (31, 'mall-member.yaml', 'dev', 'server:\r\n  port: 8000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '48d998f6c283a649f103a1378b15657b', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', '', '4d414d18-64f9-4f95-8a36-17c12a1ae756', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (32, 'datasource.yaml', 'dev', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_member?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n\r\n', 'bc21926119cc71070ee31ce11b074f51', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', '', '4d414d18-64f9-4f95-8a36-17c12a1ae756', NULL, NULL, NULL, 'yaml', NULL);

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime(0) NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfoaggr_datagrouptenantdatum`(`data_id`, `group_id`, `tenant_id`, `datum_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '增加租户字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfobeta_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_beta' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfotag_datagrouptenanttag`(`data_id`, `group_id`, `tenant_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_tag' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation`  (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE INDEX `uk_configtagrelation_configidtag`(`id`, `tag_name`, `tag_type`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_tag_relation' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_group_id`(`group_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '集群、各Group容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info`  (
  `id` bigint(64) UNSIGNED NOT NULL,
  `nid` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `data_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `idx_gmt_create`(`gmt_create`) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified`) USING BTREE,
  INDEX `idx_did`(`data_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 72 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '多租户改造' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
INSERT INTO `his_config_info` VALUES (0, 1, 'aaa', 'DEFAULT_GROUP', '', 'aa', '4124bc0a9335c27f086f24ba207a4912', '2020-08-10 02:58:02', '2020-08-10 02:58:02', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (1, 2, 'aaa', 'DEFAULT_GROUP', '', 'aa', '4124bc0a9335c27f086f24ba207a4912', '2020-08-10 02:58:23', '2020-08-10 02:58:23', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 3, 'mall-coupon.yaml', 'dev', '', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 02:59:23', '2020-08-10 02:59:23', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 4, 'datasource.yaml', 'dev', '', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 02:59:23', '2020-08-10 02:59:23', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 5, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 02:59:23', '2020-08-10 02:59:23', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 6, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '480717fcd7dd1cc0c6cb70b21a3e7a9e', '2020-08-10 02:59:48', '2020-08-10 02:59:48', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (2, 7, 'mall-coupon.yaml', 'dev', '', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 03:00:04', '2020-08-10 03:00:04', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (3, 8, 'datasource.yaml', 'dev', '', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 03:00:04', '2020-08-10 03:00:04', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (4, 9, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:00:04', '2020-08-10 03:00:04', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (5, 10, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '480717fcd7dd1cc0c6cb70b21a3e7a9e', '2020-08-10 03:00:04', '2020-08-10 03:00:04', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 11, 'mall-coupon.yaml', 'dev', '', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 03:00:17', '2020-08-10 03:00:17', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 12, 'datasource.yaml', 'dev', '', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 03:00:17', '2020-08-10 03:00:17', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 13, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:00:17', '2020-08-10 03:00:17', NULL, '192.168.117.1', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 14, 'mall-coupon.yaml', 'dev', '', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 03:04:02', '2020-08-10 03:04:03', NULL, '192.168.117.1', 'I', '40cf1f80-6df8-418b-af00-5b3627b02c6c');
INSERT INTO `his_config_info` VALUES (0, 15, 'datasource.yaml', 'dev', '', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 03:04:02', '2020-08-10 03:04:03', NULL, '192.168.117.1', 'I', '40cf1f80-6df8-418b-af00-5b3627b02c6c');
INSERT INTO `his_config_info` VALUES (0, 16, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:04:02', '2020-08-10 03:04:03', NULL, '192.168.117.1', 'I', '40cf1f80-6df8-418b-af00-5b3627b02c6c');
INSERT INTO `his_config_info` VALUES (7, 17, 'mall-coupon.yaml', 'dev', '', 'server:\r\n  port: 7000\r\n\r\n\r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug\r\n\r\n', '106576bdc8d2411cc6e4e2eccf8c715a', '2020-08-10 03:04:09', '2020-08-10 03:04:09', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (8, 18, 'datasource.yaml', 'dev', '', 'spring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_coupon?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"', '16cd8bc799a44938570e77bd48fec503', '2020-08-10 03:04:09', '2020-08-10 03:04:09', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (9, 19, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:04:09', '2020-08-10 03:04:09', NULL, '192.168.117.1', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 20, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '480717fcd7dd1cc0c6cb70b21a3e7a9e', '2020-08-10 03:07:32', '2020-08-10 03:07:33', NULL, '192.168.117.1', 'I', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (0, 21, 'datasource.yaml', 'dev', '', 'spring:\r\n    datasource:\r\n        type: com.alibaba.druid.pool.DruidDataSource\r\n        druid:\r\n            driver-class-name: com.mysql.cj.jdbc.Driver\r\n            url: jdbc:mysql://192.168.117.129:3316/mall_admin?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\r\n            username: root\r\n            password: root\r\n            initial-size: 10\r\n            max-active: 100\r\n            min-idle: 10\r\n            max-wait: 60000\r\n            pool-prepared-statements: true\r\n            max-pool-prepared-statement-per-connection-size: 20\r\n            time-between-eviction-runs-millis: 60000\r\n            min-evictable-idle-time-millis: 300000\r\n            #Oracle需要打开注释\r\n            #validation-query: SELECT 1 FROM DUAL\r\n            test-while-idle: true\r\n            test-on-borrow: false\r\n            test-on-return: false\r\n            stat-view-servlet:\r\n                enabled: true\r\n                url-pattern: /druid/*\r\n                #login-username: admin\r\n                #login-password: admin\r\n            filter:\r\n                stat:\r\n                    log-slow-sql: true\r\n                    slow-sql-millis: 1000\r\n                    merge-sql: false\r\n                wall:\r\n                    config:\r\n                        multi-statement-allow: true\r\n\r\n\r\n##多数据源的配置\r\n#dynamic:\r\n#  datasource:\r\n#    slave1:\r\n#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\r\n#      url: jdbc:sqlserver://localhost:1433;DatabaseName=renren_security\r\n#      username: sa\r\n#      password: 123456\r\n#    slave2:\r\n#      driver-class-name: org.postgresql.Driver\r\n#      url: jdbc:postgresql://localhost:5432/renren_security\r\n#      username: renren\r\n#      password: 123456', 'cd91d55457559481bc0d6797c9a513b5', '2020-08-10 03:07:32', '2020-08-10 03:07:33', NULL, '192.168.117.1', 'I', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (0, 22, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:07:32', '2020-08-10 03:07:33', NULL, '192.168.117.1', 'I', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (0, 23, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n', '71de7daa9ce55894822b076783a89329', '2020-08-10 03:10:36', '2020-08-10 03:10:37', NULL, '192.168.117.1', 'I', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (0, 24, 'mall-gateway.yaml', 'dev', '', 'server:\r\n  port: 88\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '939a33fc56eb77445f322b8bc42b8dd8', '2020-08-10 03:10:36', '2020-08-10 03:10:37', NULL, '192.168.117.1', 'I', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (0, 25, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_gateway?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'f6fa6c907353ed9fc00df1453c2be337', '2020-08-10 03:10:36', '2020-08-10 03:10:37', NULL, '192.168.117.1', 'I', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (0, 26, 'gateway.yaml', 'dev', '', 'hello: word', '1cd4998bce33dac37427fe1b4992211d', '2020-08-10 03:10:36', '2020-08-10 03:10:37', NULL, '192.168.117.1', 'I', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (0, 27, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', 'I', 'bfe18aa3-337b-439e-b02e-1c83914733c2');
INSERT INTO `his_config_info` VALUES (0, 28, 'mall-ware.yaml', 'dev', '', 'server:\r\n  port: 11000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', 'd934b1697154b541befaf7f9b89e438d', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', 'I', 'bfe18aa3-337b-439e-b02e-1c83914733c2');
INSERT INTO `his_config_info` VALUES (0, 29, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_ware?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'e556292ca0ae91f44ab692226b102668', '2020-08-10 03:11:01', '2020-08-10 03:11:01', NULL, '192.168.117.1', 'I', 'bfe18aa3-337b-439e-b02e-1c83914733c2');
INSERT INTO `his_config_info` VALUES (0, 30, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:11:48', '2020-08-10 03:11:48', NULL, '192.168.117.1', 'I', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (0, 31, 'mall-product.yaml', 'dev', '', 'server:\r\n  port: 10000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '3f320b084a43e666b2e3352af2609b68', '2020-08-10 03:11:48', '2020-08-10 03:11:48', NULL, '192.168.117.1', 'I', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (0, 32, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_product?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', '6ff212bbb8cd9314439585af33a1162a', '2020-08-10 03:11:48', '2020-08-10 03:11:48', NULL, '192.168.117.1', 'I', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (0, 33, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:12:17', '2020-08-10 03:12:18', NULL, '192.168.117.1', 'I', '72cc4135-6c4e-4549-a91e-137ce538dc32');
INSERT INTO `his_config_info` VALUES (0, 34, 'mall-order.yaml', 'dev', '', 'server:\r\n  port: 9000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', 'd005fc17b28b2bb98f1faec6991663f6', '2020-08-10 03:12:17', '2020-08-10 03:12:18', NULL, '192.168.117.1', 'I', '72cc4135-6c4e-4549-a91e-137ce538dc32');
INSERT INTO `his_config_info` VALUES (0, 35, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_order?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'f20a1e09f908b0926d2c65960ab2b1b8', '2020-08-10 03:12:17', '2020-08-10 03:12:18', NULL, '192.168.117.1', 'I', '72cc4135-6c4e-4549-a91e-137ce538dc32');
INSERT INTO `his_config_info` VALUES (0, 36, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', 'I', '4d414d18-64f9-4f95-8a36-17c12a1ae756');
INSERT INTO `his_config_info` VALUES (0, 37, 'mall-member.yaml', 'dev', '', 'server:\r\n  port: 8000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '48d998f6c283a649f103a1378b15657b', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', 'I', '4d414d18-64f9-4f95-8a36-17c12a1ae756');
INSERT INTO `his_config_info` VALUES (0, 38, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_member?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n\r\n', 'bc21926119cc71070ee31ce11b074f51', '2020-08-10 03:12:31', '2020-08-10 03:12:31', NULL, '192.168.117.1', 'I', '4d414d18-64f9-4f95-8a36-17c12a1ae756');
INSERT INTO `his_config_info` VALUES (13, 39, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '480717fcd7dd1cc0c6cb70b21a3e7a9e', '2020-08-10 09:24:57', '2020-08-10 09:24:58', NULL, '192.168.117.1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (13, 40, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 8080\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /admin\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', 'bdfa2cdbb4e216bce3df57755674e4b0', '2020-08-10 09:28:25', '2020-08-10 09:28:26', NULL, '192.168.117.1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (13, 41, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 8080\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /renren-fast\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '833712035b7e8902095f2b67416e93fc', '2020-08-11 16:47:52', '2020-08-11 16:47:52', NULL, '192.168.117.1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (13, 42, 'mall-admin.yaml', 'dev', '', '# Tomcat\r\nserver:\r\n  tomcat:\r\n    uri-encoding: UTF-8\r\n    max-threads: 1000\r\n    min-spare-threads: 30\r\n  port: 6000\r\n  connection-timeout: 5000ms\r\n  servlet:\r\n    context-path: /renren-fast\r\n\r\nspring:\r\n  # jackson时间格式化\r\n  jackson:\r\n    time-zone: GMT+8\r\n    date-format: yyyy-MM-dd HH:mm:ss\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 100MB\r\n      max-request-size: 100MB\r\n      enabled: true\r\n  redis:\r\n    open: false  # 是否开启redis缓存  true开启   false关闭\r\n    database: 0\r\n    host: localhost\r\n    port: 6379\r\n    password:    # 密码（默认为空）\r\n    timeout: 6000ms  # 连接超时时长（毫秒）\r\n    jedis:\r\n      pool:\r\n        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）\r\n        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）\r\n        max-idle: 10      # 连接池中的最大空闲连接\r\n        min-idle: 5       # 连接池中的最小空闲连接\r\n  mvc:\r\n    throw-exception-if-no-handler-found: true\r\n#  resources:\r\n#    add-mappings: false\r\n\r\n\r\n#mybatis\r\nmybatis-plus:\r\n  mapper-locations: classpath*:/mapper/**/*.xml\r\n  #实体扫描，多个package用逗号或者分号分隔\r\n  typeAliasesPackage: io.renren.modules.*.entity\r\n  global-config:\r\n    #数据库相关配置\r\n    db-config:\r\n      #主键类型  AUTO:\"数据库ID自增\", INPUT:\"用户输入ID\", ID_WORKER:\"全局唯一ID (数字类型唯一ID)\", UUID:\"全局唯一ID UUID\";\r\n      id-type: AUTO\r\n      logic-delete-value: -1\r\n      logic-not-delete-value: 0\r\n    banner: false\r\n  #原生配置\r\n  configuration:\r\n    map-underscore-to-camel-case: true\r\n    cache-enabled: false\r\n    call-setters-on-nulls: true\r\n    jdbc-type-for-null: \'null\'\r\n\r\n\r\nrenren:\r\n  redis:\r\n    open: false\r\n  shiro:\r\n    redis: false\r\n  # APP模块，是通过jwt认证的，如果要使用APP模块，则需要修改【加密秘钥】\r\n  jwt:\r\n    # 加密秘钥\r\n    secret: f4e2e52034348f86b67cde581c0f9eb5[www.renren.io]\r\n    # token有效时长，7天，单位秒\r\n    expire: 604800\r\n    header: token', '86b765a90b84cb4b081808b98e5a21da', '2020-08-11 16:47:59', '2020-08-11 16:47:59', NULL, '192.168.117.1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (19, 43, 'gateway.yaml', 'dev', '', 'hello: word', '1cd4998bce33dac37427fe1b4992211d', '2020-08-11 17:00:03', '2020-08-11 17:00:03', NULL, '192.168.117.1', 'D', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 44, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n', '71de7daa9ce55894822b076783a89329', '2020-08-11 17:07:30', '2020-08-11 17:07:31', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 45, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          predicates:\r\n            - Path=/api/**\r\n          filter:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '5ca2475d8563810450de21dce592a125', '2020-08-11 17:13:08', '2020-08-11 17:13:09', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 46, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin/admin\r\n          predicates:\r\n            - Path=/api/**\r\n          # filter:\r\n          #   - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '8732adc387cd8f79537149e19287d412', '2020-08-11 17:14:03', '2020-08-11 17:14:03', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 47, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          predicates:\r\n            - Path=/api/**\r\n          # filter:\r\n          #   - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '2e228fc7e69e053b4bf70d0b5c291475', '2020-08-11 17:17:39', '2020-08-11 17:17:39', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 48, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          # uri: lb://mall-admin\r\n          uri: http:localhost:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          # filter:\r\n          #   - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '22a64e6a7ed17594648477e0f8c923db', '2020-08-11 17:18:50', '2020-08-11 17:18:51', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 49, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          # uri: lb://mall-admin\r\n          uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          # filter:\r\n          #   - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '6c8ac92a206bced8a356e6555d1a1617', '2020-08-11 17:19:24', '2020-08-11 17:19:25', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 50, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          # uri: lb://mall-admin\r\n          uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          # filter:\r\n          #   - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '6c8ac92a206bced8a356e6555d1a1617', '2020-08-11 17:20:51', '2020-08-11 17:20:51', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 51, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          # uri: lb://mall-admin\r\n          uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filter:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '1913f3157b7627a59af1a4b19e8eb813', '2020-08-11 17:21:35', '2020-08-11 17:21:36', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 52, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          # uri: lb://mall-admin\r\n          uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', 'd22c9cfbd287bd236afb1645a7daeb8f', '2020-08-11 17:21:55', '2020-08-11 17:21:55', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 53, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', 'e07b09eea6c72be7e5e31b324be4f4fb', '2020-08-12 02:54:16', '2020-08-12 02:54:17', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 54, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            # allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '189b38e94b1cdb6da03ff796b1f06eb2', '2020-08-12 02:57:14', '2020-08-12 02:57:15', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 55, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', 'edb335256da6f5d18720528a10d30abd', '2020-08-12 03:23:16', '2020-08-12 03:23:16', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 56, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n', '9a220319d75e3f516f023343c553f6f4', '2020-08-12 03:29:48', '2020-08-12 03:29:48', NULL, '192.168.117.1', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (25, 57, 'mall-product.yaml', 'dev', '', 'server:\r\n  port: 10000\r\n\r\n\r\n  \r\n# mybatis-plus\r\nmybatis-plus:\r\n  # 搜索指定包别名\r\n  typeAliasesPackage: site.javaee.mall.**.entity\r\n  # 配置mapper的扫描，找到所有的mapper.xml映射文件\r\n  mapperLocations: classpath*:mapper/**/*Mapper.xml\r\n  # 加载全局的配置文件\r\n  #  configLocation: classpath:mybatis-config.xml_no\r\n  global-config:\r\n    db-config:\r\n      id-type: auto\r\n#      id-type: assign_id\r\n\r\n\r\n# 日志配置\r\nlogging:\r\n  level:\r\n    site.javaee: debug', '3f320b084a43e666b2e3352af2609b68', '2020-08-13 06:48:52', '2020-08-13 06:48:52', NULL, '192.168.117.1', 'U', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (14, 58, 'datasource.yaml', 'dev', '', 'spring:\r\n    datasource:\r\n        type: com.alibaba.druid.pool.DruidDataSource\r\n        druid:\r\n            driver-class-name: com.mysql.cj.jdbc.Driver\r\n            url: jdbc:mysql://192.168.117.129:3316/mall_admin?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\r\n            username: root\r\n            password: root\r\n            initial-size: 10\r\n            max-active: 100\r\n            min-idle: 10\r\n            max-wait: 60000\r\n            pool-prepared-statements: true\r\n            max-pool-prepared-statement-per-connection-size: 20\r\n            time-between-eviction-runs-millis: 60000\r\n            min-evictable-idle-time-millis: 300000\r\n            #Oracle需要打开注释\r\n            #validation-query: SELECT 1 FROM DUAL\r\n            test-while-idle: true\r\n            test-on-borrow: false\r\n            test-on-return: false\r\n            stat-view-servlet:\r\n                enabled: true\r\n                url-pattern: /druid/*\r\n                #login-username: admin\r\n                #login-password: admin\r\n            filter:\r\n                stat:\r\n                    log-slow-sql: true\r\n                    slow-sql-millis: 1000\r\n                    merge-sql: false\r\n                wall:\r\n                    config:\r\n                        multi-statement-allow: true\r\n\r\n\r\n##多数据源的配置\r\n#dynamic:\r\n#  datasource:\r\n#    slave1:\r\n#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\r\n#      url: jdbc:sqlserver://localhost:1433;DatabaseName=renren_security\r\n#      username: sa\r\n#      password: 123456\r\n#    slave2:\r\n#      driver-class-name: org.postgresql.Driver\r\n#      url: jdbc:postgresql://localhost:5432/renren_security\r\n#      username: renren\r\n#      password: 123456', 'cd91d55457559481bc0d6797c9a513b5', '2020-08-18 10:55:19', '2020-08-18 02:55:20', NULL, '0:0:0:0:0:0:0:1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (15, 59, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-18 14:28:08', '2020-08-18 06:28:08', NULL, '0:0:0:0:0:0:0:1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (14, 60, 'datasource.yaml', 'dev', '', 'spring:\r\n    datasource:\r\n        type: com.alibaba.druid.pool.DruidDataSource\r\n        druid:\r\n            driver-class-name: com.mysql.cj.jdbc.Driver\r\n            url: jdbc:mysql://192.168.100.138:3316/mall_admin?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\r\n            username: root\r\n            password: root\r\n            initial-size: 10\r\n            max-active: 100\r\n            min-idle: 10\r\n            max-wait: 60000\r\n            pool-prepared-statements: true\r\n            max-pool-prepared-statement-per-connection-size: 20\r\n            time-between-eviction-runs-millis: 60000\r\n            min-evictable-idle-time-millis: 300000\r\n            #Oracle需要打开注释\r\n            #validation-query: SELECT 1 FROM DUAL\r\n            test-while-idle: true\r\n            test-on-borrow: false\r\n            test-on-return: false\r\n            stat-view-servlet:\r\n                enabled: true\r\n                url-pattern: /druid/*\r\n                #login-username: admin\r\n                #login-password: admin\r\n            filter:\r\n                stat:\r\n                    log-slow-sql: true\r\n                    slow-sql-millis: 1000\r\n                    merge-sql: false\r\n                wall:\r\n                    config:\r\n                        multi-statement-allow: true\r\n\r\n\r\n##多数据源的配置\r\n#dynamic:\r\n#  datasource:\r\n#    slave1:\r\n#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\r\n#      url: jdbc:sqlserver://localhost:1433;DatabaseName=renren_security\r\n#      username: sa\r\n#      password: 123456\r\n#    slave2:\r\n#      driver-class-name: org.postgresql.Driver\r\n#      url: jdbc:postgresql://localhost:5432/renren_security\r\n#      username: renren\r\n#      password: 123456', 'b9d80acdafe13ef4b6885b02b1adc61f', '2020-08-18 14:42:36', '2020-08-18 06:42:36', NULL, '0:0:0:0:0:0:0:1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (14, 61, 'datasource.yaml', 'dev', '', 'spring:\r\n    datasource:\r\n        type: com.alibaba.druid.pool.DruidDataSource\r\n        druid:\r\n            driver-class-name: com.mysql.cj.jdbc.Driver\r\n            url: jdbc:mysql://192.168.100.138:3316/mall_admin?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&failOverReadOnly=false\r\n            username: root\r\n            password: root\r\n            initial-size: 10\r\n            max-active: 100\r\n            min-idle: 10\r\n            max-wait: 60000\r\n            pool-prepared-statements: true\r\n            max-pool-prepared-statement-per-connection-size: 20\r\n            time-between-eviction-runs-millis: 60000\r\n            min-evictable-idle-time-millis: 300000\r\n            #Oracle需要打开注释\r\n            #validation-query: SELECT 1 FROM DUAL\r\n            test-while-idle: true\r\n            test-on-borrow: false\r\n            test-on-return: false\r\n            stat-view-servlet:\r\n                enabled: true\r\n                url-pattern: /druid/*\r\n                #login-username: admin\r\n                #login-password: admin\r\n            filter:\r\n                stat:\r\n                    log-slow-sql: true\r\n                    slow-sql-millis: 1000\r\n                    merge-sql: false\r\n                wall:\r\n                    config:\r\n                        multi-statement-allow: true\r\n\r\n\r\n##多数据源的配置\r\n#dynamic:\r\n#  datasource:\r\n#    slave1:\r\n#      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\r\n#      url: jdbc:sqlserver://localhost:1433;DatabaseName=renren_security\r\n#      username: sa\r\n#      password: 123456\r\n#    slave2:\r\n#      driver-class-name: org.postgresql.Driver\r\n#      url: jdbc:postgresql://localhost:5432/renren_security\r\n#      username: renren\r\n#      password: 123456', '7cd9ebdf0ce70b425efd5fd8051c27ab', '2020-08-18 14:43:28', '2020-08-18 06:43:29', NULL, '0:0:0:0:0:0:0:1', 'U', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b');
INSERT INTO `his_config_info` VALUES (26, 62, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_product?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', '6ff212bbb8cd9314439585af33a1162a', '2020-08-31 09:39:35', '2020-08-31 01:39:36', NULL, '192.168.100.138', 'U', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (24, 63, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848', '87ed567378cbbefdfe9c6dc9edc72e73', '2020-08-31 09:39:51', '2020-08-31 01:39:51', NULL, '192.168.100.138', 'U', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (26, 64, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.100.138:3316/mall_product?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'b52ae27d9ec5f6ae363c5a36c24444c7', '2020-08-31 09:40:14', '2020-08-31 01:40:14', NULL, '192.168.100.138', 'U', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288');
INSERT INTO `his_config_info` VALUES (16, 65, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        server-addr: 192.168.117.129:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '45e590f29f534105dce263f8cdad51ba', '2020-08-31 17:12:35', '2020-08-31 09:12:35', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (18, 66, 'datasource.yaml', 'dev', '', '\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://192.168.117.129:3316/mall_gateway?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\r\n    type: com.alibaba.druid.pool.DruidDataSource\r\n    druid:\r\n      # 下面为连接池的补充设置，应用到上面所有数据源中\r\n      # 初始化大小，最小，最大\r\n      initial-size: 5\r\n      min-idle: 5\r\n      max-active: 20\r\n      # 配置获取连接等待超时的时间\r\n      max-wait: 60000\r\n      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n      time-between-eviction-runs-millis: 60000\r\n      # 配置一个连接在池中最小生存的时间，单位是毫秒\r\n      min-evictable-idle-time-millis: 300000\r\n      validation-query: SELECT 1 FROM DUAL\r\n      test-while-idle: true\r\n      test-on-borrow: false\r\n      test-on-return: false\r\n      # 打开PSCache，并且指定每个连接上PSCache的大小\r\n      pool-prepared-statements: true\r\n      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\r\n      max-pool-prepared-statement-per-connection-size: 20\r\n      filters: stat,wall\r\n      use-global-data-source-stat: true\r\n      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录\r\n      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\r\n      # 配置监控服务器\r\n      stat-view-servlet:\r\n        login-username: admin\r\n        login-password: 123456\r\n        reset-enable: false\r\n        url-pattern: /druid/*\r\n        # 添加IP白名单\r\n        #allow:\r\n        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高\r\n        #deny:\r\n      web-stat-filter:\r\n        # 添加过滤规则\r\n        url-pattern: /*\r\n        # 忽略过滤格式\r\n        exclusions: \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\"\r\n\r\n\r\n', 'f6fa6c907353ed9fc00df1453c2be337', '2020-08-31 17:13:36', '2020-08-31 09:13:36', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 67, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', 'dcc6a0a3acbaf921a29462ae26e1f047', '2020-08-31 17:18:59', '2020-08-31 09:18:59', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 68, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            # - Path=/api/**\r\n            - Path=/api/admin/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n', '01172843b80516d95dd15edd25d9babf', '2020-08-31 17:29:10', '2020-08-31 09:29:10', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 69, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            # - Path=/api/**\r\n            - Path=/api/admin/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n', '01172843b80516d95dd15edd25d9babf', '2020-09-01 09:54:15', '2020-09-01 01:54:15', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 70, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n            # - Path=/api/admin/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '868d5447e0e9fad43b1bd2a335d20dfc', '2020-09-01 10:11:04', '2020-09-01 02:11:04', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');
INSERT INTO `his_config_info` VALUES (16, 71, 'cloud.yaml', 'dev', '', 'spring:\r\n  cloud:\r\n    nacos:\r\n      discovery:\r\n        # server-addr: 192.168.117.129:8848\r\n        server-addr: 192.168.100.138:8848\r\n    gateway:\r\n      globalcors:\r\n        corsConfigurations:\r\n          \'[/**]\':\r\n            #这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！\r\n            allowCredentials: true\r\n            # 可以填写多个域名用\",\"隔开 例如：\"http://www.xiaolc.cn,https://spring.io\"  \"*\"代表允许所有\r\n            allowedOrigins: \"*\"\r\n            allowedMethods: \"*\"\r\n            allowedHeaders: \"*\"\r\n      routes:\r\n        - id: baidu_route\r\n          uri: https://www.baidu.com\r\n          predicates:\r\n            - Query=url,baidu\r\n\r\n        - id: qq_route\r\n          uri: https://www.qq.com\r\n          predicates:\r\n            - Query=url,qq\r\n\r\n\r\n        - id: product_route\r\n          uri: lb://mall-product\r\n          predicates:\r\n            - Path=/api/product/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\r\n\r\n\r\n\r\n        \r\n        - id: admin_route\r\n          uri: lb://mall-admin\r\n          # uri: http://192.168.117.1:6000\r\n          predicates:\r\n            - Path=/api/**\r\n            # - Path=/api/admin/**\r\n          filters:\r\n            - RewritePath=/api/(?<segment>.*),/admin/$\\{segment}\r\n\r\n', '868d5447e0e9fad43b1bd2a335d20dfc', '2020-09-01 10:56:01', '2020-09-01 02:56:02', NULL, '192.168.100.138', 'U', '0065df7d-ce04-4969-8823-aa48ccbbb29c');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions`  (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `resource` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `uk_role_permission`(`role`, `resource`, `action`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `idx_user_role`(`username`, `role`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '租户容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_info_kptenantid`(`kp`, `tenant_id`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'tenant_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
INSERT INTO `tenant_info` VALUES (1, '1', '40cf1f80-6df8-418b-af00-5b3627b02c6c', 'coupon', '优惠服务', 'nacos', 1597028452626, 1597028452626);
INSERT INTO `tenant_info` VALUES (2, '1', '0065df7d-ce04-4969-8823-aa48ccbbb29c', 'gateway', '网关服务', 'nacos', 1597028499906, 1597028499906);
INSERT INTO `tenant_info` VALUES (3, '1', '4d414d18-64f9-4f95-8a36-17c12a1ae756', 'member', '会员服务', 'nacos', 1597028523803, 1597028523803);
INSERT INTO `tenant_info` VALUES (4, '1', '72cc4135-6c4e-4549-a91e-137ce538dc32', 'order', '订单服务', 'nacos', 1597028573075, 1597028573075);
INSERT INTO `tenant_info` VALUES (5, '1', '4a578b7a-13f4-4d88-8fc2-1c3a6be19288', 'product', '产品服务', 'nacos', 1597028612763, 1597028612763);
INSERT INTO `tenant_info` VALUES (6, '1', 'bfe18aa3-337b-439e-b02e-1c83914733c2', 'ware', '仓库服务', 'nacos', 1597028628163, 1597028628163);
INSERT INTO `tenant_info` VALUES (7, '1', 'a8ccd143-d6fa-45f3-b782-dd443fdfd98b', 'admin', '后台管理', 'nacos', 1597028716953, 1597028716953);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);

SET FOREIGN_KEY_CHECKS = 1;
